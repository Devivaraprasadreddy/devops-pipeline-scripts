pipeline {
    agent any
    
    tools {
        maven '3.6.3' // Name of the Maven installation in Jenkins
    }

    parameters {
        choice(name: 'BRANCH_NAME', choices: ['master', 'main'], description: 'Choose the branch to deploy')
    }

    environment {
        REMOTE_HOST = '54.174.154.223'
        REMOTE_USER = 'root'
        REMOTE_KEY = '/var/lib/jenkins/.ssh/spring'
        REMOTE_PATH = '/root/project'
        GIT_CREDENTIALS_ID = '0ce9cbdc-1c6e-4cb1-866b-bbec3ffb6db3'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the specified branch using Git credentials
                    checkout([$class: 'GitSCM', branches: [[name: "${params.BRANCH_NAME}"]],
                              userRemoteConfigs: [[url: 'https://gitlab.com/dsp9391/springboot_project.git', credentialsId: "${env.GIT_CREDENTIALS_ID}"]]])
                }
            }
        }
        stage('install docker on remote'){
            steps{
                script{
                    sh"""
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo apt-get update -y'
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo apt install apt-transport-https ca-certificates curl software-properties-common -y'
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"'
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo apt install docker-ce -y'
                        ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'docker --version'
                    """
                }
            }
        }
        stage('Build') {
            steps {
                // Build the project using Maven
                sh 'mvn clean package'
            }
        }
        stage('install maven'){
            steps{
                script{
                    sh"""
                    ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo apt-get update -y'
                    ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'sudo apt-get install maven -y'
                    """                   
                    
                }
            }
        }
        
        stage('copy files from local to remote'){ 
            steps{ 
                script{ 
                sh""" 
                rsync -avz -e 'ssh -i ${REMOTE_KEY}' --delete ${WORKSPACE}/ ${env.REMOTE_USER}@${env.REMOTE_HOST}:${env.REMOTE_PATH}  
                """ 
                } 
            } 
        } 
        stage('build an image'){
            steps{
                script{
                    sh"""
                    ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'docker build -t myspringbootimages:latest ${env.REMOTE_PATH}'
                     ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'docker run -d --name myspringcont -p 9090:8080 myspringbootimages:latest ${env.REMOTE_PATH}'
                    """
                }
            }
        }
        
    
	stage('push to dockerhub'){
            steps{
                script{
                    sh"""
                 ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'docker tag myspringbootimages:latest dsp9391/dockerhub:myspringbootimg'
                 ssh -i ${REMOTE_KEY} ${env.REMOTE_USER}@${env.REMOTE_HOST} 'docker push dsp9391/dockerhub:myspringbootimg'
                
                """
                }
            }
            
        }
    }    

    post {
        always {
            echo 'Deployment completed.'
        }
    }
}

